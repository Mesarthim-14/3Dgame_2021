//=============================================================================
//
// スキルのUIクラス [ui_skill.cpp]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "ui_skill.h"
#include "manager.h"
#include "renderer.h"
#include "texture.h"

//=============================================================================
// オブジェクト生成
//=============================================================================
CUiSkill* CUiSkill::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// オブジェクトを生成
	CUiSkill* pUiSkill = new CUiSkill;

	// 初期化処理
	pUiSkill->Init(pos, size);

	return pUiSkill;
}

//=============================================================================
// コンストラクタ
//=============================================================================
CUiSkill::CUiSkill()
{
	m_bUse = false;
}

//=============================================================================
// デストラクタ
//=============================================================================
CUiSkill::~CUiSkill()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CUiSkill::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// 初期化処理
	CUi::Init(pos, size);												// 座標、サイズ
	BindTexture(CTexture::GetTexture(CTexture::TEXTURE_NUM_SKILL_UI));	// テクスチャ反映

	return S_OK;
}

//================================================
// 終了処理
//================================================
void CUiSkill::Uninit(void)
{
	// 終了処理
	CUi::Uninit();
}

//================================================
// 更新処理
//================================================
void CUiSkill::Update(void)
{
	// 更新処理
	CUi::Update();
}

//================================================
// 描画処理
//================================================
void CUiSkill::Draw(void)
{
	// フラグがあれば
	if (m_bUse == true)
	{
		// 描画処理
		CUi::Draw();
	}
}

//================================================
// フラグの設定
//================================================
void CUiSkill::SetUse(bool bUse)
{
	m_bUse = bUse;
}
